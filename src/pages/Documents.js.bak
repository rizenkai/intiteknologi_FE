import React, { useState, useEffect } from 'react';
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Alert,
  IconButton,
  Avatar,
  Divider
} from '@mui/material';
import { 
  CloudDownload as DownloadIcon, 
  Add as AddIcon,
  Search as SearchIcon,
  Delete as DeleteIcon
} from '@mui/icons-material';
import { format } from 'date-fns';

const Documents = () => {
  // State for documents
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  
  // State for upload dialog
  const [uploadDialog, setUploadDialog] = useState(false);
  const [uploadLoading, setUploadLoading] = useState(false);
  const [uploadError, setUploadError] = useState('');
  const [selectedDocument, setSelectedDocument] = useState(null); // For updating existing document
  const [selectedFile, setSelectedFile] = useState(null);
  const [documentData, setDocumentData] = useState({
    title: '',
    description: '',
    category: 'general',
    status: 'completed',
    targetUser: ''
  });
  const [userList, setUserList] = useState([]);

  // Get user role from localStorage
  let userRole = '';
  try {
    const user = JSON.parse(localStorage.getItem('user'));
    userRole = user?.role || '';
  } catch {}
  
  // Fetch documents on component mount
  useEffect(() => {
    fetchDocuments();
  }, []);
  
  // Function to fetch documents
  const fetchDocuments = async () => {
    setLoading(true);
    setError('');
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('http://localhost:5000/api/documents', {
        headers: { Authorization: `Bearer ${token}` },
        // Add cache buster to avoid browser caching
        params: { _t: new Date().getTime() }
      });
      
      // Semua role (admin, staff, user) dapat melihat seluruh dokumen yang diberikan backend
      // Tidak perlu filter tambahan di frontend
      const uniqueDocs = {};
      (response.data.documents || []).forEach(doc => {
        uniqueDocs[doc._id] = doc;
      });
      setDocuments(Object.values(uniqueDocs));
    } catch (error) {
      console.error('Error fetching documents:', error);
      setError(error.response?.data?.message || 'Failed to fetch documents');
    } finally {
      setLoading(false);
    }
  };
  
  // Fetch user list only for admin/staff
  useEffect(() => {
    if (userRole === 'admin' || userRole === 'staff') {
      const token = localStorage.getItem('token');
      axios.get('http://localhost:5000/api/auth/regular-users', {
        headers: { Authorization: `Bearer ${token}` }
      })
      .then(res => setUserList(res.data))
      .catch(() => setUserList([]));
    }
  }, [userRole]);
  
  // Handle file selection
  const handleFileChange = (e) => {
    setSelectedFile(e.target.files[0]);
  };
  
  // Handle input change for document form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setDocumentData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle document download
  const handleDownloadDocument = (documentId) => {
    const doc = documents.find(doc => doc._id === documentId);
    if (doc && doc.filePath && doc.filePath.startsWith('http')) {
      window.open(doc.filePath, '_blank');
      return;
    }
    alert('File tidak tersedia. Silakan upload ulang dokumen.');
  };

  
  // Handle document upload
  const handleUploadDocument = async () => {
    // Validate inputs
    if (!selectedFile) {
      setUploadError('Please select a file to upload');
      return;
    }
    
    // If we're updating an existing document, we don't need a title
    if (!selectedDocument && (!documentData.title || documentData.title.trim() === '')) {
      setUploadError('Document title is required');
      return;
    }
    
    setUploadLoading(true);
    setUploadError('');
    
    try {
      const token = localStorage.getItem('token');
      const formData = new FormData();
      
      // Append file
      formData.append('file', selectedFile);
      
      // If we're updating an existing document
      if (selectedDocument) {
        formData.append('documentId', selectedDocument._id);
      } else {
        // For new document, append all metadata
        formData.append('title', documentData.title.trim());
        formData.append('description', documentData.description?.trim() || '');
        formData.append('category', documentData.category);
        formData.append('status', documentData.status);
      }
      
      // Only add targetUser if admin or staff
      if (userRole === 'admin' || userRole === 'staff') {
        formData.append('targetUser', documentData.targetUser);
      }
      
      // Add a unique identifier to prevent caching issues
      const timestamp = new Date().getTime();
      formData.append('timestamp', timestamp);
      
      const response = await axios.post('http://localhost:5000/api/documents', formData, {
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'multipart/form-data'
        }
      });
      
      // Only close dialog and reset form if upload was successful
      if (response.data.success) {
        setUploadDialog(false);
        setSelectedFile(null);
        setSelectedDocument(null);
        setDocumentData({
          title: '',
          description: '',
          category: 'general',
          status: 'completed',
          targetUser: ''
        });
        
        // Wait a moment before fetching to ensure server has processed the upload
        setTimeout(() => {
          fetchDocuments(); // Use direct fetch instead of debounced to ensure fresh data
        }, 500);
      }
    } catch (error) {
      console.error('Error uploading document:', error);
      const errorMessage = error.response?.data?.message || 'Failed to upload document';
      setUploadError(errorMessage);
      
      // Show alert for duplicate document error
      if (errorMessage.includes('already exists')) {
        alert('A document with this title already exists. Please use a different title.');
      }
    } finally {
      setUploadLoading(false);
    }
  };
  

  
  // Filter documents based on search term (title, placeholder id, etc)
  const filteredDocuments = documents.filter(doc => {
    if (!searchTerm || searchTerm.trim() === '') return true; // Show all documents if search is empty
    
    const search = searchTerm.toLowerCase().trim();
    
    // Cari berdasarkan namaProyek, title, ID, dan informasi lainnya
    const namaProyek = (doc.namaProyek || '').toString().toLowerCase();
    const title = (doc.title || '').toString().toLowerCase();
    const docId = (doc._id || '').toString().toLowerCase();
    const placeholderId = (doc.placeholderId || '').toString().toLowerCase();
    const fileName = (doc.fileName || '').toString().toLowerCase();
    const fileType = (doc.fileType || '').toString().toLowerCase();
    const status = (doc.status || '').toString().toLowerCase();
    
    // Untuk debugging
    console.log(`Searching for: "${search}" in doc:`, {
      id: docId,
      namaProyek,
      title,
      placeholderId,
      fileName,
      fileType,
      status
    });
    
    return (
      namaProyek.includes(search) ||
      title.includes(search) ||
      docId.includes(search) ||
      placeholderId.includes(search) ||
      fileName.includes(search) ||
      fileType.includes(search) ||
      status.includes(search) ||
      (doc.targetUser && (
        (doc.targetUser.username || '').toLowerCase().includes(search) ||
        (doc.targetUser.fullname || '').toLowerCase().includes(search)
      ))
    );
  });
  
  // Format date for display
  const formatDate = (date) => {
    try {
      return format(new Date(date), 'dd MMMM yyyy');
    } catch (error) {
      return 'Invalid date';
    }
  };
  
  return (
    <Box sx={{ minHeight: '100vh', width: '100%', fontFamily: 'Open Sans, Arial, Helvetica, sans-serif', color: '#fff', backgroundImage: "url('/Frame211332.png')", backgroundPosition: 'center', backgroundRepeat: 'no-repeat', backgroundSize: 'cover', backgroundColor: '#090d1f', overflowX: 'hidden' }}>
      {/* Konten utama */}
      <Box sx={{ minHeight: '100vh', position: 'relative' }}>
        {/* Overlay gradient agar teks tetap jelas */}
        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', zIndex: 0, background: 'radial-gradient(ellipse at 60% 40%, rgba(65,227,255,0.18) 0%, rgba(59,130,246,0.16) 40%, rgba(9,13,31,0.8) 100%)', pointerEvents: 'none' }} />

        {/* Konten documents */}
        <Box sx={{ width: '100%', maxWidth: 1200, mx: 'auto', px: { xs: 1, sm: 2, md: 3 }, pt: 5, position: 'relative', zIndex: 1 }}>
          <Typography variant="h4" sx={{ mb: 4, color: '#fff', fontWeight: 700 }}>
            Document List
          </Typography>

          {/* Search & Add New Document */}
          <Box sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, alignItems: { xs: 'stretch', sm: 'center' }, mb: 3, gap: 2 }}>
            <TextField
              InputLabelProps={{ style: { color: '#b5eaff', fontWeight: 600 } }}
              InputProps={{ 
                style: { color: '#fff', background: 'rgba(65,227,255,0.15)', borderRadius: 2 },
                startAdornment: (
                  <Box component="span" sx={{ color: '#b5eaff', mr: 1, fontSize: 14, display: 'flex', alignItems: 'center' }}>
                    <span style={{ marginRight: 4 }}>🔍</span>
                  </Box>
                )
              }}
              variant="outlined"
              size="small"
              placeholder="Cari Dokumen (Nama/ID)"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              sx={{ flexGrow: 1, maxWidth: { sm: 300 } }}
            />

            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => {
                setUploadDialog(true);
                setSelectedDocument(null); // Reset for new document
                setDocumentData({
                  title: '',
                  description: '',
                  status: 'pending',
                });
                setSelectedFile(null);
              }}
              sx={{ 
                bgcolor: '#41e3ff', 
                color: '#0a1929', 
                fontWeight: 700,
                '&:hover': { bgcolor: '#65e7ff' },
                whiteSpace: 'nowrap',
                px: 2
              }}
            >
              ADD NEW DOCUMENT
            </Button>
          </Box>

          {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
              <CircularProgress sx={{ color: '#41e3ff' }} />
            </Box>
          ) : filteredDocuments.length === 0 ? (
            <Box sx={{ textAlign: 'center', my: 4, p: 3, border: '1px dashed #41e3ff', borderRadius: 2 }}>
              <Typography variant="h6" sx={{ color: '#b5eaff' }}>
                No documents found
              </Typography>
            </Box>
          ) : (
            /* Grid kartu dokumen, maksimal 3 per baris, styling mirip Dashboard */
            <Box sx={{ width: '100%', mb: 3, display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: '1fr 1fr 1fr' }, gap: { xs: 1.5, sm: 2, md: 4 } }}>
              {filteredDocuments.map((doc) => (
                <Box key={doc._id} sx={{ minWidth: { xs: 0, sm: 250, md: 320 }, maxWidth: '100%' }}>
                  <Paper elevation={0} sx={{
                    minHeight: { xs: 160, md: 220 },
                    p: { xs: 1.5, sm: 2, md: 2.5 },
                    border: '1.5px solid #41e3ff',
                    borderRadius: 2,
                    boxShadow: '0 2px 8px rgba(0,0,0,0.04)',
                    transition: 'box-shadow 0.2s',
                    '&:hover': { boxShadow: '0 4px 24px rgba(0,0,0,0.08)' },
                    background: 'rgba(65,227,255,0.15)',
                    backdropFilter: 'blur(8px)',
                    color: '#fff',
                  }}>
                    <Typography variant="subtitle2" sx={{ mb: 0.5, fontSize: { xs: 11, md: 13 }, fontWeight: 500, color: '#b5eaff' }}>#{doc.placeholderId || doc._id}</Typography>
                    <Typography variant="h6" sx={{ fontWeight: 700, fontSize: 18, mb: 0.5, color: '#fff' }}>{doc.namaProyek || doc.title}</Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                      <Box sx={{ px: 1.2, py: 0.2, bgcolor: statusColors[doc.status] || '#e7f6fd', color: '#222', borderRadius: 1, fontWeight: 600, fontSize: 13, minWidth: 86, textAlign: 'center' }}>
                        {statusLabels[doc.status] || doc.status}
                      </Box>
                    </Box>
                    
                    {/* Tampilkan Tipe Pengujian */}
                    <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                      <span>Tipe Pengujian:</span> 
                      <b style={{ color: '#fff' }}>
                        {doc.tipePengujian || 
                          (doc.mutuBahan && doc.mutuBahan.startsWith('T') ? 'Besi' : 
                           doc.mutuBahan && doc.mutuBahan.startsWith('K') ? 'Beton' : '-')}
                      </b>
                    </Box>
                    {/* Tampilkan BP atau Panjang Ulur */}
                    {(() => {
                      // Determine tipePengujian based on mutuBahan if not set
                      const isBesi = doc.tipePengujian === 'Besi' || (doc.mutuBahan && doc.mutuBahan.startsWith('T'));
                      
                      return isBesi ? (
                        <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                          <span>Panjang Ulur (mm):</span> <b style={{ color: '#fff' }}>{doc.bp || '-'}</b>
                        </Box>
                      ) : (
                        <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                          <span>BP (Kg):</span> <b style={{ color: '#fff' }}>{doc.bp || '-'}</b>
                        </Box>
                      );
                    })()}
                    <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                      <span>Mutu Bahan:</span> <b style={{ color: '#fff' }}>{doc.mutuBahan || '-'}</b>
                    </Box>
                    <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                      <span>Tipe Bahan:</span> <b style={{ color: '#fff' }}>{doc.tipeBahan || '-'}</b>
                    </Box>
                    <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                      <span>File Type:</span> <b style={{ color: '#fff' }}>{doc.fileType || (doc.filePath ? doc.filePath.split('.').pop() : '-')}</b>
                    </Box>
                    <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                      <span>Submission:</span> <b style={{ color: '#fff' }}>{formatDate(doc.submissionDate)}</b>
                    </Box>
                    {doc.filePath && (
                      <Box sx={{ fontSize: 14, mb: 0.5, display: 'flex', justifyContent: 'space-between', color: '#b5eaff' }}>
                        <span>Uploaded:</span> <b style={{ color: '#fff' }}>{formatDate(doc.uploadDate)}</b>
                      </Box>
                      <span style={{ color: '#aaa', fontWeight: 500 }}>waiting to complete</span>
                    ) : (
                      // Tampilkan tombol download & aksi lain jika sudah completed/file sudah diupload
                      <>
                        {doc.fileName && doc.fileName !== 'placeholder.txt' && (
                          <IconButton id={`download-${doc._id}`} onClick={() => handleDownloadDocument(doc._id)}>
                            <DownloadIcon sx={{ color: '#fff' }} />
                          </IconButton>
                        )}
                        
                        {(userRole === 'admin' || userRole === 'staff') && (
                          doc.filePath && doc.fileName && doc.status === 'completed' ? (
                            <IconButton 
                              color="secondary" 
                              onClick={() => {
                                setSelectedDocument(doc);
                                setDocumentData({
                                  title: doc.namaProyek || doc.title,
                                  description: doc.description || '',
                                  category: doc.category || 'general',
                                  status: doc.status || 'completed',
                                  targetUser: doc.targetUser || ''
                                });
                                setUploadDialog(true);
                              }}
                              title="Edit File Document"
                              size="small"
                            >
                              <DownloadIcon sx={{ color: '#fff', transform: 'rotate(180deg)' }} />
                            </IconButton>
                          ) : (
                            <IconButton 
                              color="secondary" 
                              onClick={() => {
                                setSelectedDocument(doc);
                                setDocumentData({
                                  title: doc.namaProyek || doc.title,
                                  description: doc.description || '',
                                  category: doc.category || 'general',
                                  status: doc.status || 'completed',
                                  targetUser: doc.targetUser || ''
                                });
                                setUploadDialog(true);
                              }}
                              title="Upload File"
                              size="small"
                            >
                              <AddIcon sx={{ color: '#fff' }} />
                            </IconButton>
                          )
                        )}
                      </>
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
      
      {/* Upload Document Dialog */}
      <Dialog open={uploadDialog} onClose={() => {
        setUploadDialog(false);
        setSelectedDocument(null); // Clear selected document when closing dialog
      }} maxWidth="md" fullWidth>
        <DialogTitle>
          {selectedDocument ? `Upload File for "${selectedDocument.title}"` : 'Upload New Document'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            {/* Only show document metadata fields for new documents */}
            {!selectedDocument && (
              <>
                <Grid item xs={12}>
                  <TextField
  name="title"
  label="Document Title"
  fullWidth
  required
  value={documentData.title}
  onChange={handleInputChange}
  InputLabelProps={{ style: { color: '#b5eaff', fontWeight: 600 } }}
  InputProps={{
    style: {
      color: '#fff',
      background: 'rgba(65,227,255,0.15)',
      borderRadius: 8,
      border: '1.5px solid #41e3ff',
      fontFamily: 'Open Sans',
      fontWeight: 600,
    },
    sx: {
      '& input': { color: '#fff' },
      '& input::placeholder': { color: '#bdbdbd', opacity: 1 },
    }
  }}
  sx={{ mb: 2, borderRadius: 2, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#41e3ff' } }}
/>
                </Grid>
                <Grid item xs={12}>
                  <TextField
  name="description"
  label="Description"
  fullWidth
  multiline
  rows={3}
  value={documentData.description}
  onChange={handleInputChange}
  InputLabelProps={{ style: { color: '#b5eaff', fontWeight: 600 } }}
  InputProps={{
    style: {
      color: '#fff',
      background: 'rgba(65,227,255,0.10)',
      borderRadius: 8,
      border: '1.5px solid #41e3ff',
      fontFamily: 'Open Sans',
      fontWeight: 600,
    },
    sx: {
      '& textarea': { color: '#fff' },
      '& textarea::placeholder': { color: '#bdbdbd', opacity: 1 },
    }
  }}
  sx={{ mb: 2, borderRadius: 2, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#41e3ff' } }}
/>
                </Grid>
                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>Category</InputLabel>
                    <Select
                      name="category"
                      value={documentData.category}
                      label="Category"
                      onChange={handleInputChange}
                    >
                      <MenuItem value="general">General</MenuItem>
                      <MenuItem value="report">Report</MenuItem>
                      <MenuItem value="contract">Contract</MenuItem>
                      <MenuItem value="invoice">Invoice</MenuItem>
                      <MenuItem value="manual">Manual</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>Status</InputLabel>
                    <Select
                      name="status"
                      value={documentData.status}
                      label="Status"
                      onChange={handleInputChange}
                    >
                      <MenuItem value="pending">Pending</MenuItem>
                      <MenuItem value="in_progress">In Progress</MenuItem>
                      <MenuItem value="review">Review</MenuItem>
                      <MenuItem value="completed">Completed</MenuItem>
                      <MenuItem value="approved">Approved</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </>
            )}
            {/* User Tujuan tampil untuk admin dan staff saat membuat dokumen baru */}
            {(!selectedDocument && (userRole === 'admin' || userRole === 'staff')) && (
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>User Tujuan *</InputLabel>
                <Select
                  name="targetUser"
                  value={documentData.targetUser || ''}
                  onChange={handleInputChange}
                  required
                >
                  {userList.map((user) => (
                    <MenuItem key={user._id} value={user._id}>
                      {user.username} - {user.fullname}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
            <Grid item xs={12}>
              <Button
                variant="outlined"
                component="label"
                fullWidth
                sx={{ py: 1.5 }}
              >
                {selectedFile ? selectedFile.name : 'Select Document File'}
                <input
                  type="file"
                  hidden
                  onChange={handleFileChange}
                />
              </Button>
              <Typography variant="caption" color="text.secondary">
                Supported file types: PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, TXT, etc.
              </Typography>
            </Grid>
          </Grid>
          
          {uploadError && (
            <Alert severity="error" sx={{ mt: 2 }}>
              {uploadError}
            </Alert>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setUploadDialog(false)}>Cancel</Button>
          <Button
            onClick={handleUploadDocument}
            variant="contained"
            disabled={uploadLoading || !selectedFile || (!selectedDocument && !documentData.title)}
          >
            {uploadLoading ? <CircularProgress size={24} /> : 'Upload'}
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default Documents;
